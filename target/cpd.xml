<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="25" tokens="135">
      <file line="90"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NeighborCommand.java"/>
      <file line="68"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/RadiusCommand.java"/>
      <codefragment><![CDATA[        for (Star star : neighbors.get(distance)) {
          System.out.println(star.getID());
        }
      }
    } else {
      // Case when command input was star name
      String toFind = args[2].replaceAll("\"", "");
      if (args[2].equals("\"\"")) {
        System.out.println("ERROR: Star name cannot be empty string");
        return;
      }
      List<Double> coords = new ArrayList<>();
      Star toRemove = null;
      // Keeps track of input star so we can remove it from final printed list
      for (Star star : stars) {
        if (star.getName().equals(toFind)) {
          coords = star.getCoordinates();
          toRemove = star;
          break;
        }
      }
      if (toRemove == null) {
        System.out.println("ERROR: Star not found");
        return;
      }]]></codefragment>
   </duplication>
   <duplication lines="23" tokens="109">
      <file line="107"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NaiveNeighborCommand.java"/>
      <file line="93"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NeighborCommand.java"/>
      <file line="71"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/RadiusCommand.java"/>
      <codefragment><![CDATA[      }
    } else {
      // Case when command input was star name
      String toFind = args[2].replaceAll("\"", "");
      if (args[2].equals("\"\"")) {
        System.out.println("ERROR: Star name cannot be empty string");
        return;
      }
      List<Double> coords = new ArrayList<>();
      Star toRemove = null;
      // Keeps track of input star so we can remove it from final printed list
      for (Star star : stars) {
        if (star.getName().equals(toFind)) {
          coords = star.getCoordinates();
          toRemove = star;
          break;
        }
      }

      if (toRemove == null) {
        System.out.println("ERROR: Star not found");
        return;
      }]]></codefragment>
   </duplication>
   <duplication lines="17" tokens="106">
      <file line="74"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NeighborCommand.java"/>
      <file line="120"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NeighborCommand.java"/>
      <codefragment><![CDATA[      while (totalStars > k) {
        int diff = totalStars - k;
        List<Star> furthest = neighbors.get(neighbors.lastKey());
        if (furthest.size() <= diff) {
          totalStars -= furthest.size();
          neighbors.pollLastEntry();
        } else {
          Collections.shuffle(furthest);
          for (int i = 0; i < diff; i++) {
            furthest.remove(0);
          }
          totalStars -= diff;
        }
      }
      // Prints ID of each star in neighbors
      for (Double distance : neighbors.keySet()) {
        for (Star star : neighbors.get(distance)) {]]></codefragment>
   </duplication>
   <duplication lines="18" tokens="101">
      <file line="85"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NaiveNeighborCommand.java"/>
      <file line="63"
            path="/Users/alexguo/cs0320/stars-aguo71/src/main/java/edu/brown/cs/student/stars/NaiveRadiusCommand.java"/>
      <codefragment><![CDATA[      System.out.println("ERROR: Neighbor count must be non-negative");
      return;
    }

    // Calculates distance of each star in dataset stars from input coordinate or star name
    NeighborDistances calculator = new NeighborDistances(stars);
    if (args.length == 5) {
      // Case when coordinate was specified in input
      List<Double> coords = new ArrayList<>();
      try {
        coords.add(Double.parseDouble(args[2]));
        coords.add(Double.parseDouble(args[3]));
        coords.add(Double.parseDouble(args[4]));
      } catch (NumberFormatException e) {
        System.out.println("ERROR: Input coordinates not numbers");
        return;
      }
      neighbors = calculator.findDistances(coords);]]></codefragment>
   </duplication>
</pmd-cpd>